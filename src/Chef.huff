#include "../lib/huffmate/src/auth/Owned.huff"
#include "../lib/huffmate/src/utils/SafeTransferLib.huff"
#include "../lib/huffmate/src/math/SafeMath.huff"
#include "../lib/huffmate/src/auth/NonPayable.huff"
#include "../lib/huffmate/src/data-structures/Hashmap.huff"

#define function poolLength() view returns (uint256)
#define function add(uint256 allocPoint, address lpToken, bool withUpdate) nonpayable returns ()
#define function set(uint256 pid, uint256 allocPoint, bool withUpdate) nonpayable returns ()
#define function setMigrator(address migrator) nonpayable returns ()
#define function migrate(uint256 pid) nonpayable returns ()
#define function getMultiplier(uint256 from, uint256 to) view returns (uint256)
#define function pendingSushi(uint256 pid, address user) view returns (uint256)
#define function massUpdatePools() nonpayable returns ()
#define function updatePool(uint256 pid) nonpayable returns ()
#define function deposit(uint256 pid, uint256 amount) nonpayable returns ()
#define function withdraw(uint256 pid, uint256 amount) nonpayable returns ()
#define function emergencyWithdraw(uint256 pid) nonpayable returns ()
#define function dev(address devaddr) nonpayable returns ()
#define function sushi() view returns (address)
#define function devaddr() view returns (address)
#define function bonusEndBlock() view returns (uint256)
#define function sushiPerBlock() view returns (uint256)
#define function BONUS_MULTIPLIER() view returns (uint256)
#define function migrator() view returns (address)
#define function poolInfo(uint256 pid) view returns (address,uint256,uint256,uint256)
#define function userInfo(uint256 pid, address user) view returns (uint256,uint256)
#define function totalAllocPoint() view returns (uint256)
#define function startBlock() view returns (uint256)
#define function player() view returns (address)
#define function isSolved() view returns (bool)

#define event Deposit(address indexed user, uint256 indexed pid, uint256 amount)
#define event Withdraw(address indexed user, uint256 indexed pid, uint256 amount)
#define event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount)

#define error Unauthorized()
#define error OutOfBounds()
#define error NoMigrator()
#define error CallFailed()
#define error ReturnDataSizeIsZero()
#define error BadMigrate()
#define error WithdrawNotGood()

#define constant BONUS_MULTIPLIER_CONSTANT = 0x0a
#define constant E = 0xe8d4a51000 // 0.000001 ether == 1e12

#define constant SUSHI_SLOT = FREE_STORAGE_POINTER()
#define constant DEVADDR_SLOT = FREE_STORAGE_POINTER()
#define constant BONUS_END_BLOCK_SLOT = FREE_STORAGE_POINTER()  // @audit : slot number = 5
#define constant SUSHI_PER_BLOCK_SLOT = FREE_STORAGE_POINTER() // @audit : slot number = 3
#define constant MIGRATOR_SLOT = FREE_STORAGE_POINTER()
#define constant POOL_INFO_SLOT = FREE_STORAGE_POINTER()
#define constant USER_INFO_SLOT = FREE_STORAGE_POINTER()
#define constant TOTAL_ALLOC_POINT_SLOT = FREE_STORAGE_POINTER()
#define constant START_BLOCK_SLOT = FREE_STORAGE_POINTER()  // @audit : slot number = 4
#define constant PLAYER_SLOT = FREE_STORAGE_POINTER()

#define macro CONSTRUCTOR() = {
    OWNED_CONSTRUCTOR()
    0xc0 0xe0 codesize sub
    0x00 codecopy
    0x00 mload
    [SUSHI_SLOT] sstore
    0x20 mload
    [DEVADDR_SLOT] sstore
    0x40 mload
    [SUSHI_PER_BLOCK_SLOT] sstore
    0x60 mload
    [START_BLOCK_SLOT] sstore
    0x80 mload
    [BONUS_END_BLOCK_SLOT] sstore
    0xa0 mload
    [PLAYER_SLOT] sstore
    0x68 dup1
    codesize sub
    dup1 swap2
    0x00 codecopy
    0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
    NON_PAYABLE()
    0x00 calldataload 0xe0 shr
    dup1 __FUNC_SIG(poolLength)            eq pool_length_jump                  jumpi
    dup1 __FUNC_SIG(add)                   eq add_jump                          jumpi
    dup1 __FUNC_SIG(set)                   eq set_jump                          jumpi
    dup1 __FUNC_SIG(setMigrator)           eq set_migrator_jump                 jumpi
    dup1 __FUNC_SIG(migrate)               eq migrate_jump                      jumpi
    dup1 __FUNC_SIG(getMultiplier)         eq get_multiplier_jump               jumpi
    dup1 __FUNC_SIG(pendingSushi)          eq pending_sushi_jump                jumpi
    dup1 __FUNC_SIG(massUpdatePools)       eq mass_update_pools_jump            jumpi
    dup1 __FUNC_SIG(updatePool)            eq update_pool_jump                  jumpi
    dup1 __FUNC_SIG(deposit)               eq deposit_jump                      jumpi
    dup1 __FUNC_SIG(withdraw)              eq withdraw_jump                     jumpi
    dup1 __FUNC_SIG(emergencyWithdraw)     eq emergency_withdraw_jump           jumpi
    dup1 __FUNC_SIG(dev)                   eq dev_jump                          jumpi
    dup1 __FUNC_SIG(sushi)                 eq sushi_jump                        jumpi
    dup1 __FUNC_SIG(devaddr)               eq devaddr_jump                      jumpi
    dup1 __FUNC_SIG(bonusEndBlock)         eq bonus_end_block_jump              jumpi
    dup1 __FUNC_SIG(sushiPerBlock)         eq sushi_per_block_jump              jumpi
    dup1 __FUNC_SIG(BONUS_MULTIPLIER)      eq bonus_multiplier_jump             jumpi
    dup1 __FUNC_SIG(migrator)              eq migrator_jump                     jumpi
    dup1 __FUNC_SIG(poolInfo)              eq pool_info_jump                    jumpi
    dup1 __FUNC_SIG(userInfo)              eq user_info_jump                    jumpi
    dup1 __FUNC_SIG(totalAllocPoint)       eq total_alloc_point_jump            jumpi
    dup1 __FUNC_SIG(startBlock)            eq start_block_jump                  jumpi
    dup1 __FUNC_SIG(player)                eq player_jump                       jumpi
    dup1 __FUNC_SIG(isSolved)              eq is_solved_jump                    jumpi
    OWNED_MAIN()
    0x00 dup1 revert
    pool_length_jump:
        POOL_LENGTH()
    add_jump:
        ADD()
    set_jump:
        SET()
    set_migrator_jump:
        SET_MIGRATOR()
    migrate_jump:
        MIGRATE()
    get_multiplier_jump:
        GET_MULTIPLIER()
    pending_sushi_jump:
        PENDING_SUSHI()
    mass_update_pools_jump:
        MASS_UPDATE_POOLS()
    update_pool_jump:
        UPDATE_POOL()
    deposit_jump:
        DEPOSIT()
    withdraw_jump:
        WITHDRAW()
    emergency_withdraw_jump:
        EMERGENCY_WITHDRAW()
    dev_jump:
        DEV()
    sushi_jump:
        SUSHI()
    devaddr_jump:
        DEVADDR()
    bonus_end_block_jump:
        BONUS_END_BLOCK()
    sushi_per_block_jump:
        SUSHI_PER_BLOCK()
    bonus_multiplier_jump:
        BONUS_MULTIPLIER()
    migrator_jump:
        MIGRATOR()
    pool_info_jump:
        POOL_INFO()
    user_info_jump:
        USER_INFO()
    total_alloc_point_jump:
        TOTAL_ALLOC_POINT()
    start_block_jump:
        START_BLOCK()
    player_jump:
        PLAYER()
    is_solved_jump:
        IS_SOLVED()
}

#define macro IS_SOLVED() = takes(0) returns(0) {
    [SUSHI_SLOT] sload
    [PLAYER_SLOT] sload
    ERC20_BALANCE_OF(0x00)
    0xd3c21bcecceda1000000
    gt iszero
    0x40 mstore
    0x20 0x40 return
    // sushi.balanceOf(player) > 1000000 ether  
}

#define macro POOL_LENGTH() = takes(0) returns(0) {
    [POOL_INFO_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro ADD() = takes(0) returns(0) {
    ONLY_OWNER()
    0x04 calldataload
    0x24 calldataload
    0x44 calldataload
    iszero no_update_jump jumpi
        MASS_UPDATE_POOLS()
    no_update_jump:
    [START_BLOCK_SLOT] sload
    dup1 number
    gt iszero
    is_not_bigger_jump jumpi
        pop number
    is_not_bigger_jump:
    swap2 dup1
    [TOTAL_ALLOC_POINT_SLOT] sload
    SAFE_ADD()
    [TOTAL_ALLOC_POINT_SLOT] sstore
    swap1
    [POOL_INFO_SLOT] dup1 sload
    dup1 0x01 add
    dup3 sstore
    0x04 mul
    swap1 0x00 mstore
    0x20 0x00 sha3
    add
    swap1 dup2 sstore
    0x01 add
    swap1 dup2 sstore
    0x01 add sstore
    stop
}

#define macro SET() = takes(0) returns(0) {
    ONLY_OWNER()
    0x04 calldataload
    dup1 CHECK_PID()
    0x24 calldataload
    0x44 calldataload
    iszero
    no_update_jump jumpi
        MASS_UPDATE_POOLS()
    no_update_jump:
    swap1 GET_POOL_SLOT(0x00)
    0x01 add
    dup2 dup2 sload
    [TOTAL_ALLOC_POINT_SLOT] sload
    SAFE_SUB() SAFE_ADD()
    [TOTAL_ALLOC_POINT_SLOT] sstore sstore
    stop
}

#define macro SET_MIGRATOR() = takes(0) returns(0) {
    ONLY_OWNER()
    0x04 calldataload
    [MIGRATOR_SLOT] sstore
    stop
}

#define macro MIGRATE() = takes(0) returns(0) {
    [MIGRATOR_SLOT] sload dup1
    iszero iszero
    is_not_zero_jump jumpi
        __ERROR(NoMigrator) 0x00 mstore
        0x04 0x00 revert
    is_not_zero_jump: 
    0x04 calldataload
    dup1 CHECK_PID()
    GET_POOL_SLOT(0x00)
    dup1 sload                    
    dup1 address
    ERC20_BALANCE_OF(0x00)
    dup2 swap1 dup5
    SAFE_APPROVE(0x20)
    __RIGHTPAD(0xce5494bb) 0x20 mstore
    0x24 mstore
    swap1 0x20 0x24 0x20 0x00 0x20
    swap5 gas call
    call_success_jump jumpi
        __ERROR(CallFailed) <mem_ptr> mstore
        0x04 <mem_ptr> revert
    call_success_jump:                      
    returndatasize
    size_is_not_zero_jump jumpi
        __ERROR(ReturnDataSizeIsZero) <mem_ptr> mstore 
        0x04 <mem_ptr> revert
    size_is_not_zero_jump:
    0x20 mload
    address
    ERC20_BALANCE_OF(0x40)
    0x00 mload
    eq balances_equal_jump jumpi
        __ERROR(ReturnDataSizeIsZero) 0x00 mstore
        0x04 0x00 revert
    balances_equal_jump:
    0x20 mload
    swap1 sstore
    stop
}

#define macro GET_MULTIPLIER() = takes(0) returns(0) {
    0x04 calldataload
    0x24 calldataload
    INNER_GET_MULTIPLIER()
    0x00 mstore
    0x20 0x00 return
}

#define macro PENDING_SUSHI() = takes(0) returns(0) {
    0x04 calldataload
    dup1 CHECK_PID()
    GET_POOL_SLOT(0x00)
    dup1 0x03 add sload
    dup2 sload
    address
    ERC20_BALANCE_OF(0x00)
    dup3 0x02 add sload
    dup1 number gt
    dup3 iszero iszero
    and iszero
    condition_is_false_jump jumpi
        number
        INNER_GET_MULTIPLIER()
        [SUSHI_PER_BLOCK_SLOT] sload
        SAFE_MUL()
        dup4 0x01 add sload
        SAFE_MUL()
        [TOTAL_ALLOC_POINT_SLOT] sload
        swap1 SAFE_DIV()
        [E] SAFE_MUL() SAFE_DIV()
        SAFE_ADD()
        swap1 pop
        end_jump jump                                      
    condition_is_false_jump:
        pop pop
        swap1 pop
    end_jump:
    [E]
    0x24 calldataload
    0x04 calldataload
    [USER_INFO_SLOT]
    GET_SLOT_FROM_KEYS_2D(0x00)
    dup1 sload
    swap1 0x01 add sload
    swap3
    SAFE_MUL() SAFE_DIV() SAFE_SUB()
    0x00 mstore
    0x20 0x00 return
}

#define macro MASS_UPDATE_POOLS() = takes(0) returns(0) {
    [POOL_INFO_SLOT] sload
    dup1 iszero
    end_jump jumpi
    0x00
    start_jump jump
    continue_jump:
        eq end_jump jumpi
        start_jump:
        dup1
        INNER_UPDATE_POOL()
        0x01 add
        dup2 dup2
        continue_jump jump
    end_jump:
    stop
}

#define macro UPDATE_POOL() = takes(0) returns(0) {
    0x04 calldataload
    dup1 CHECK_PID()
    INNER_UPDATE_POOL()
    stop
}

/**
    // Deposit LP tokens to MasterChef for SUSHI allocation.
    function deposit(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        updatePool(_pid);
        if (user.amount > 0) {
            uint256 pending =
                user.amount.mul(pool.accSushiPerShare).div(1e12).sub(
                    user.rewardDebt
                );
            //@audit :  pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(pool.allocPoint)
            safeSushiTransfer(msg.sender, pending);
        }
        pool.lpToken.safeTransferFrom(
            address(msg.sender),
            address(this),
            _amount
        );
        user.amount = user.amount.add(_amount);
        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);
        emit Deposit(msg.sender, _pid, _amount);
    }
*/
#define macro DEPOSIT() = takes(0) returns(0) {
    0x24 calldataload  // [amount]
    0x04 calldataload // [amount, _pid]
    dup1 CHECK_PID()  // takes(0), leaves(0).. // [amount, _pid] 
    dup1 // [amount, _pid, _pid] 
    INNER_UPDATE_POOL() // takes(1), leaves(0).. // [amount, _pid] 
    dup1 // [amount, _pid, _pid] 
    GET_POOL_SLOT(0x00)  // takes(1), leaves(1), // [amount, _pid, pool_slot]
    caller dup3 // [amount, _pid, pool_slot, msg.sender, _pid]
    [USER_INFO_SLOT] // [amount, _pid, pool_slot, msg.sender, _pid, USER_INFO_SLOT]
    GET_SLOT_FROM_KEYS_2D(0x20) // takes(3), leaves(1) .. // [amount, _pid, pool_slot, user_lot] // user_slot == userInfo[_pid][msg.sender]
    dup1 sload // [amount, _pid, pool_slot, user_slot, user_slot] => sload(user_slot) => [amount, _pid, pool_slot, user_slot, user.amount]
    dup1 iszero // [amount, _pid, pool_slot, user_slot, 1/0]
    user_amount_zero_jump jumpi // if user.amount == 0 then jump to  user_amount_zero_jump else no jump. // [amount, _pid, pool_slot, user_slot, 1/0]
        dup1 [E] // [amount, _pid, pool_slot, user_slot, user_slot, 1e12]
        dup5 0x03 add sload // [amount, _pid, pool_slot, user_slot, user_slot, 1e12, add(_pid,0x03) ] => sload(add(_pid,0x03)) => [amount, _pid, pool_slot, user_slot, user_slot, 1e12, pool.accSushiPerShare]
        dup5 0x01 add // [amount, _pid, pool_slot, user_slot, user_slot, 1e12, pool.accSushiPerShare, add(pool_slot, 0x01)]
        sload // sload(add(pool_slot, 0x01)) => [amount, _pid, pool_slot, user_slot, user_slot, 1e12, pool.accSushiPerShare, pool.allocPoint]
        swap3 //  [amount, _pid, pool_slot, user_slot, pool.allocPoint, 1e12, pool.accSushiPerShare,  user_slot]
        SAFE_MUL() // [amount, _pid, pool_slot, user_slot, pool.allocPoint, 1e12, mul(pool.accSushiPerShare,user.amount)]
        SAFE_DIV() // [amount, _pid, pool_slot, user_slot, pool.allocPoint, div(mul(pool.accSushiPerShare,user.amount),1e12)]
        SAFE_SUB() // [amount, _pid, pool_slot, user_slot, (div(mul(pool.accSushiPerShare,user.amount),1e12) - pool.allocPoint) ] // == pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(pool.allocPoint)  @audit 
        caller // [amount, _pid, pool_slot, user_slot, pending, msg.sender]
        SAFE_SUSHI_TRANSFER(0x00)  // takes(2), leaves(0).. //[amount, _pid, pool_slot, user_slot ] // == safeSushiTransfer(msg.sender, pending);
    user_amount_zero_jump:   // [amount, _pid, pool_slot, user_slot]
    dup3 sload // [amount, _pid, pool_slot, user_slot, _pid] => sload(_pid)
    dup6 address caller // [amount, _pid, pool_slot, user_slot, _pid, ]
    SAFE_TRANSFER_FROM(0x00)
    dup1 dup6 SAFE_ADD()
    dup3 sstore
    [E] swap1
    dup4 0x03 add sload
    SAFE_MUL() SAFE_DIV()
    dup2 0x01 add sstore
    pop pop swap1
    0x00 mstore
    caller
    __EVENT_HASH(Deposit)
    0x20 0x00 log3
    stop
}

/**
    // Withdraw LP tokens from MasterChef.
    function withdraw(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= _amount, "withdraw: not good");
        updatePool(_pid);
        uint256 pending =
            user.amount.mul(pool.accSushiPerShare).div(1e12).sub(
                user.rewardDebt
            );
        safeSushiTransfer(msg.sender, pending);
        user.amount = user.amount.sub(_amount);
        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);
        pool.lpToken.safeTransfer(address(msg.sender), _amount);
        emit Withdraw(msg.sender, _pid, _amount);
    }
*/
#define macro WITHDRAW() = takes(0) returns(0) {
    0x24 calldataload
    0x04 calldataload 
    dup1 CHECK_PID()
    caller dup2 [USER_INFO_SLOT]
    GET_SLOT_FROM_KEYS_2D(0x00)
    dup1 sload
    dup1 dup5 gt iszero
    continue_jump jumpi
        __ERROR(WithdrawNotGood) 0x00 mstore
        0x04 0x00 revert
    continue_jump:
    dup3
    INNER_UPDATE_POOL()
    dup3 GET_POOL_SLOT(0x00)
    dup2 dup4 0x01 add sload
    [E] dup4 0x03 add sload
    dup1 swap4
    SAFE_MUL() SAFE_DIV() SAFE_SUB()
    caller
    SAFE_SUSHI_TRANSFER(0x00)
    dup6 dup4 sub dup5 sstore
    [E] swap1 dup4
    SAFE_MUL() SAFE_DIV()
    dup4 0x01 add sstore
    sload dup5 caller
    SAFE_TRANSFER(0x00)
    swap3 0x00 mstore
    pop caller
    __EVENT_HASH(Withdraw)
    0x20 0x00 log3
    stop
}

/**
    // Withdraw without caring about rewards. EMERGENCY ONLY.
    function emergencyWithdraw(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        pool.lpToken.safeTransfer(address(msg.sender), user.amount);
        emit EmergencyWithdraw(msg.sender, _pid, user.amount);
        user.amount = 0;
        user.rewardDebt = 0;
    }

*/
#define macro EMERGENCY_WITHDRAW() = takes(0) returns(0) {
    0x04 calldataload  // [_pid]
    dup1 // [_pid, _pid]
    CHECK_PID() // takes(1), leaves(0).. // [_pid]
    caller dup2 [USER_INFO_SLOT] // [_pid, msg.sender, _pid, USER_INFO_SLOT]
    GET_SLOT_FROM_KEYS_2D(0x00) // takes(3), leaves(1).. // [_pid, user_slot]
    dup1 sload // [_pid, user_slot, user_slot] => sload(user_slot) // [_pid, user_slot, user.amount]
    dup2 0x01 add sload// [_pid, user_slot, user.amount, sload(add(user_slot, 0x01))] => [_pid, user_slot, user.amount, user.rewardDebt]
    dup4 // [_pid, user_slot, user.amount, user.rewardDebt, _pid]
    GET_POOL_SLOT(0x00) // takes(1), leaves(1) .. // [_pid, user_slot, user.amount, user.rewardDebt, pool_slot]
    sload  // [_pid, user_slot, user.amount, user.rewardDebt, lpToken]
    dup3 caller // [_pid, user_slot, user.amount, user.rewardDebt, lpToken, user.amount, msg.sender]
    SAFE_TRANSFER(0x00) // takes(3), leaves(0) // [_pid, user_slot, user.amount, user.rewardDebt, lpToken, user.amount, msg.sender] // == pool.lpToken.safeTransfer(address(msg.sender), user.amount);
    dup2 0x00 mstore // [_pid, user_slot, user.amount, user.rewardDebt] ==> mstore(0x00, user.amount)
    swap3 caller // [user.rewardDebt, user_slot, user.amount, _pid, msg.sender] 
    __EVENT_HASH(EmergencyWithdraw) // [user.rewardDebt, user_slot, user.amount, _pid, msg.sender, EmergencyWithdraw] 
    0x20 0x00 log3 // [user.rewardDebt, user_slot, user.amount, _pid, msg.sender, EmergencyWithdraw, 0x20, 0x00] ==> log3 =>  EmergencyWithdraw(msg.sender, _pid, user.amount) // [user.rewardDebt, user_slot, user.amount]
    0x00 swap3 swap1 // [0x00 , user_slot, user.rewardDebt, user.amount]
    sstore // slot(user.amount) = user.rewardDebt // [0x00 , user_slot] @audit 
    sstore // user.amount = 0x00
    stop
}

#define macro DEV() = takes(0) returns(0) {
    [DEVADDR_SLOT] sload
    caller eq only_dev_jump jumpi
    __ERROR(Unauthorized) 0x00 mstore
    0x04 0x00 revert
    only_dev_jump:
    0x04 calldataload
    [DEVADDR_SLOT] sstore
    stop
}

#define macro SUSHI() = takes(0) returns(0) {
    [SUSHI_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro DEVADDR() = takes(0) returns(0) {
    [DEVADDR_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro BONUS_END_BLOCK() = takes(0) returns(0) {
    [BONUS_END_BLOCK_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro SUSHI_PER_BLOCK() = takes(0) returns(0) {
    [SUSHI_PER_BLOCK_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro BONUS_MULTIPLIER() = takes(0) returns(0) {
    [BONUS_MULTIPLIER_CONSTANT] 0x00 mstore
    0x20 0x00 return
}

#define macro MIGRATOR() = takes(0) returns(0) {
    [MIGRATOR_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro POOL_INFO() = takes(0) returns(0) {
    0x04 calldataload
    dup1 CHECK_PID()
    GET_POOL_SLOT(0x00)
    dup1 sload
    0x00 mstore
    dup1 0x01 add sload
    0x20 mstore
    dup1 0x02 add sload
    0x40 mstore
    dup1 0x03 add sload
    0x60 mstore
    0x80 0x00 return
}

#define macro USER_INFO() = takes(0) returns(0) {
    0x24 calldataload
    0x04 calldataload
    [USER_INFO_SLOT]
    GET_SLOT_FROM_KEYS_2D(0x00)
    dup1 sload
    0x00 mstore
    0x01 add sload
    0x20 mstore
    0x40 0x00 return
}

#define macro TOTAL_ALLOC_POINT() = takes(0) returns(0) {
    [TOTAL_ALLOC_POINT_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro START_BLOCK() = takes(0) returns(0) {
    [START_BLOCK_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro PLAYER() = takes(0) returns(0) {
    [PLAYER_SLOT] sload
    0x00 mstore
    0x20 0x00 return
}

#define macro ONLY_OWNER() = takes (0) returns (0) {
    [OWNER] sload
    caller eq ONLY_OWNER_continue jumpi
    __ERROR(Unauthorized) 0x00 mstore
    0x04 0x00 revert
    ONLY_OWNER_continue:
}

/**
    // Return reward multiplier over the given _from to _to block.
    function getMultiplier(uint256 _from, uint256 _to)
        public
        view
        returns (uint256)
    {
        if (_to <= bonusEndBlock) {
            return _to.sub(_from).mul(BONUS_MULTIPLIER);
        } else if (_from >= bonusEndBlock) {
            return _to.sub(_from);
        } else {
            return
                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(
                    _to.sub(bonusEndBlock)
                );
        }
    }
*/

#define macro INNER_GET_MULTIPLIER() = takes(2) returns(1) { 
    // from INNER_UPDATE_POOL: [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number]
    [BONUS_END_BLOCK_SLOT] sload // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, BONUS_END_BLOCK_SLOT] => sload(BONUS_END_BLOCK_SLOT) => [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, bonus_endBlock]
    dup1 dup3 gt // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, bonus_endBlock, bonus_endBlock, block.number] => gt(block.number > bonus_endBlock) => [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, bonus_endBlock, 1/0]
    to_is_bigger_jump jumpi // if top of stack is 0 no jump... // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, bonus_endBlock, 1/0]
        pop // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number]
        SAFE_SUB() // takes(2), leaves(1).. // [lp.balanceOf(chef), pool_slot, (block.number - pool.lastRewardedBlock)] 
        [BONUS_MULTIPLIER_CONSTANT] SAFE_MUL() // [lp.balanceOf(chef), pool_slot, (block.number - pool.lastRewardedBlock), 10] => mul(10, (block.number - pool.lastRewardedBlock)) == _to.sub(_from).mul(BONUS_MULTIPLIER)
        end_jump jump // [lp.balanceOf(chef), pool_slot, multiplier] // THIS CASE WILL NOT HAPPEN
    to_is_bigger_jump: // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, bonus_endBlock]
    dup1 dup4 lt // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, bonus_endBlock, bonus_endBlock, pool.lastRewardedBlock] => lt(pool.lastRewardedBlock, bonus_endBlock) => [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, bonus_endBlock, 1/0]
    from_is_smaller_jump jumpi // if pool.lastRewardedBlock < bonus_endBlock then jump to from_is_smaller_jump else no jump.. // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, bonus_endBlock, 1/0]
        pop // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number]
        SAFE_SUB() // [lp.balanceOf(chef), pool_slot, (block.number - pool.lastRewardedBlock)]
        end_jump jump // [lp.balanceOf(chef), pool_slot, multiplier] // multiplier = (block.number - pool.lastRewardedBlock) // == _to.sub(_from);
    from_is_smaller_jump: // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, bonus_endBlock]
    swap2 dup3 // [lp.balanceOf(chef), pool_slot, bonus_endBlock, block.number, pool.lastRewardedBlock, bonus_endBlock]
    SAFE_SUB() // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock,  block.number, ( bonus_endBlock - pool.lastRewardedBlock) ]
    [BONUS_MULTIPLIER_CONSTANT] SAFE_MUL() // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number, mul((bonus_endBlock - pool.lastRewardedBlock),10) ]
    swap2 swap1 // [lp.balanceOf(chef), pool_slot, mul((bonus_endBlock - pool.lastRewardedBlock),10), pool.lastRewardedBlock, block.number]
    SAFE_SUB() // [lp.balanceOf(chef), pool_slot, mul((bonus_endBlock - pool.lastRewardedBlock),10), (block.number - pool.lastRewardedBlock) ]
    SAFE_ADD() // [lp.balanceOf(chef), pool_slot, add(mul((bonus_endBlock - pool.lastRewardedBlock),10), (block.number - pool.lastRewardedBlock)) ] 
    end_jump: // [lp.balanceOf(chef), pool_slot, multiplier] // multiplier= bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(_to.sub(bonusEndBlock)
}

#define macro ERC20_BALANCE_OF(mem_ptr) = takes(2) returns(1) {
    __RIGHTPAD(0x70a08231) <mem_ptr> mstore // [pool.lastRewardedBlock, pool_slot, pool.lpToken, address(chef), ]
    <mem_ptr> 0x04 add mstore // [pool.lastRewardedBlock, pool_slot, pool.lpToken, address(chef), ]
    <mem_ptr> 0x24 <mem_ptr> 0x20 // [pool.lastRewardedBlock, pool_slot, pool.lpToken, address(chef), 0x00, 0x24, 0x00, 0x20]
    swap4 gas staticcall  // [pool.lastRewardedBlock, pool_slot, pool.lpToken, address(chef), 0x00, 0x24, 0x00, 0x20] => 
    call_success_jump jumpi
        __ERROR(CallFailed) <mem_ptr> mstore
        0x04 <mem_ptr> revert
    call_success_jump:                      
    returndatasize
    size_is_not_zero_jump jumpi
        __ERROR(ReturnDataSizeIsZero) <mem_ptr> mstore
        0x04 <mem_ptr> revert
    size_is_not_zero_jump:
    <mem_ptr> mload
}

#define macro SUSHI_MINT(mem_ptr) = takes(3) returns(0) {
    __RIGHTPAD(0x40c10f19) <mem_ptr> mstore 
    <mem_ptr> 0x04 add mstore
    <mem_ptr> 0x24 add mstore
    <mem_ptr> 0x44 <mem_ptr> 0x00 0x00 
    swap5 gas call 
    call_success_jump jumpi
        __ERROR(CallFailed) <mem_ptr> mstore
        0x04 <mem_ptr> revert
    call_success_jump:
}
/**
    // Update reward variables of the given pool to be up-to-date.
    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        uint256 lpSupply = pool.lpToken.balanceOf(address(this));
        if (lpSupply == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }
        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
        uint256 sushiReward =
            multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(
                totalAllocPoint
            );
        sushi.mint(devaddr, sushiReward.div(10));
        sushi.mint(address(this), sushiReward);
        pool.accSushiPerShare = pool.accSushiPerShare.add(
            sushiReward.mul(1e12).div(lpSupply)
        );
        pool.lastRewardBlock = block.number;
    }
*/
#define macro INNER_UPDATE_POOL() = takes(1) returns(0) {
    // from deposit: [amount, _pid, _pid]
 
    GET_POOL_SLOT(0x00) // takes(1), leaves(1).. // [pool_slot]
    dup1 0x02 add sload // [pool_slot, pool_slot, 0x02] => sload(add(pool_slot + 0x02)) => [pool_slot, pool.lastRewardedBlock] 
    dup1 number gt // [pool_slot, pool.lastRewardedBlock, pool.lastRewardedBlock, block.number] => gt(block.number, pool.lastRewardedBlock) => [pool_slot, pool.lastRewardedBlock, 1/0]
    block_number_bigger_jump jumpi // if top of stack is 0 no jump.. else jump to `block_number_bigger_jump`: [pool_slot, pool.lastRewardedBlock, 1/0]
        pop pop // []
        end_jump jump // [end_jump] => jump(end_jump) 
    block_number_bigger_jump: // [pool_slot, pool.lastRewardedBlock]
    swap1 dup1 sload // [ pool.lastRewardedBlock, pool_slot, pool_slot] = > sload(pool_slot) => [pool.lastRewardedBlock, pool_slot, pool.lpToken]
    address // [pool.lastRewardedBlock, pool_slot, pool.lpToken, address(chef)]
    ERC20_BALANCE_OF(0x00) // takes(2) leaves(1).. // [pool.lastRewardedBlock, pool_slot, lp.balanceOf(chef)]
    dup1 // [pool.lastRewardedBlock, pool_slot, lp.balanceOf(chef), lp.balanceOf(chef)]
    lp_supply_not_zero_jump jumpi // if top of stack is 0 no jump, else jump to lp_supply_not_zero_jump // [pool.lastRewardedBlock, pool_slot, lp.balanceOf(chef)]
        pop 0x02 add // [pool.lastRewardedBlock, pool_slot] => add(pool_slot, 0x02)=> [pool.lastRewardedBlock, pool.lastRewardedBlock_SLOT] 
        number swap1 // [pool.lastRewardedBlock, pool.lastRewardedBlock, block.number] => swap1 => [pool.lastRewardedBlock, block.number, pool.lastRewardedBlock_SLOT]
        sstore // sstore(pool.lastRewardedBlock_SLOT, block.number) == pool.lastRewardedBlock = block.number => [pool.lastRewardedBlock]
        pop // []
        end_jump jump // end_jump 
    lp_supply_not_zero_jump: // [pool.lastRewardedBlock, pool_slot, lp.balanceOf(chef)]
    swap2 number // [lp.balanceOf(chef), pool_slot, pool.lastRewardedBlock, block.number]
    INNER_GET_MULTIPLIER() // takes(2), leaves(1).. // [lp.balanceOf(chef), pool_slot, multiplier] 
    [SUSHI_PER_BLOCK_SLOT] sload // [lp.balanceOf(chef), pool_slot, multiplier, 1] 
    SAFE_MUL() // [lp.balanceOf(chef), pool_slot, mul(multiplier, 1)]
    dup2 0x01 add sload // [lp.balanceOf(chef), pool_slot, mul(multiplier, 1), add(pool_slot, 0x01) ] => sload(add(pool_slot, 0x01)) => [lp.balanceOf(chef), pool_slot, mul(multiplier, 1), pool.allocPoint]
    SAFE_MUL() // [lp.balanceOf(chef), pool_slot, mul(mul(multiplier, 1), pool.allocPoint)]
    [TOTAL_ALLOC_POINT_SLOT] sload swap1 // [lp.balanceOf(chef), pool_slot,  totalAllocPoint, mul(mul(multiplier, 1), pool.allocPoint)]
    SAFE_DIV() // [lp.balanceOf(chef), pool_slot, div(mul(mul(multiplier, 1), pool.allocPoint), totalAllocPoint)] // ==> sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint)
    [SUSHI_SLOT] sload dup1 // [lp.balanceOf(chef), pool_slot, sushi_reward, sushi, sushi]
    0x0a dup4 // [lp.balanceOf(chef), pool_slot, sushi_reward, sushi, sushi, 0x0a, sushi_reward]
    SAFE_DIV() // [lp.balanceOf(chef), pool_slot, sushi_reward, sushi, sushi, div(sushi_reward, 0x0a)]
    [DEVADDR_SLOT] sload // [lp.balanceOf(chef), pool_slot, sushi_reward, sushi, sushi, div(sushi_reward, 0x0a), devAddr]
    SUSHI_MINT(0x00) // takes(3), leaves(0) =>  [lp.balanceOf(chef), pool_slot, sushi_reward, sushi] // sushi.mint(devaddr, sushiReward.div(10));
    dup2 address // [lp.balanceOf(chef), pool_slot, sushi_reward, sushi, sushi_reward, address(chef)]
    SUSHI_MINT(0x00) // takes(3), leaves(0) => [lp.balanceOf(chef), pool_slot, sushi_reward]
    swap1 swap2 swap1 // [pool_slot, lp.balanceOf(chef), sushi_reward]
    [E] // [pool_slot, lp.balanceOf(chef), sushi_reward, 1e12]
    SAFE_MUL()  // [pool_slot, lp.balanceOf(chef), mul(sushi_reward, 1e12)]
    SAFE_DIV() // [pool_slot, div(mul(sushi_reward, 1e12),lp.balanceOf(chef))]
    dup2 0x03 add sload // [pool_slot, div(mul(sushi_reward, 1e12),lp.balanceOf(chef)), add(pool_slot, 0x03)] => sload(add(pool_slot, 0x03)) = accSushiPerShare // [pool_slot, div(mul(sushi_reward, 1e12),lp.balanceOf(chef)), pool.accSushiPerShare]
    SAFE_ADD() // [pool_slot, add(div(mul(sushi_reward, 1e12),lp.balanceOf(chef)), pool.accSushiPerShare)) ] // == pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)
    dup2 0x03 add // [pool_slot, add(div(mul(sushi_reward, 1e12),lp.balanceOf(chef)), pool.accSushiPerShare)), add(pool_slot, 0x03)] 
    sstore  // sstore(add(pool_slot, 0x03), add(div(mul(sushi_reward, 1e12),lp.balanceOf(chef)), pool.accSushiPerShare))) => // [pool_slot, ] // == pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)
    number  // [pool_slot, block.number]
    swap1 0x02 add sstore // [block.number, add(pool_slot,0x02) ] // sstore(add(pool_slot,0x02), block.number) // == pool.block.number = block.number
    end_jump: // [] // leaves(0)
}

#define macro CHECK_PID() = takes(1) returns(0) {
    [POOL_INFO_SLOT] sload
    gt
    is_not_out_of_bounds_jump jumpi
        __ERROR(OutOfBounds) 0x00 mstore
        0x04 0x00 revert
    is_not_out_of_bounds_jump:
}

#define macro GET_POOL_SLOT(mem_ptr) = takes(1) returns(1) {
    [POOL_INFO_SLOT]
    <mem_ptr> mstore
    0x04 mul
    0x20 <mem_ptr> sha3
    add
}

#define macro SAFE_SUSHI_TRANSFER(mem_ptr) = takes(2) returns(0) {
    [SUSHI_SLOT] sload dup1 address
    ERC20_BALANCE_OF(<mem_ptr>)
    dup1 dup5 gt
    amount_bigger_jump jumpi
        pop swap2 swap1
        SUSHI_TRANSFER(<mem_ptr>)
        end_jump jump
    amount_bigger_jump:
        swap1 swap2
        SUSHI_TRANSFER(<mem_ptr>)
        pop
    end_jump:
}

#define macro SUSHI_TRANSFER(mem_ptr) = takes(3) returns(0) {
    __RIGHTPAD(0xa9059cbb) <mem_ptr> mstore
    <mem_ptr> 0x04 add mstore
    <mem_ptr> 0x24 add mstore
    <mem_ptr> 0x44 <mem_ptr> 
    0x00 0x00 swap5 gas call
    call_success_jump jumpi
        __ERROR(CallFailed) <mem_ptr> mstore
        0x04 <mem_ptr> revert
    call_success_jump:
}